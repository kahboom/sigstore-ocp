apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.configs.clientserver.name }}
  namespace: {{ .Values.configs.clientserver.namespace }}
  labels:
    app: {{ .Values.configs.clientserver.name }}
spec:
  selector:
    matchLabels:
      app: {{ .Values.configs.clientserver.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.configs.clientserver.name }}
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 65533
      {{- if $.Values.configs.clientserver.rolebindings }}
      serviceAccountName: {{ index .Values.configs.clientserver.rolebindings 0 }}
      {{- end }}
      volumes:
        - name: shared-data
          emptyDir: {}
      initContainers:
      - name: "init-shared-data-cg"
        image: "{{ template "image" .Values.configs.clientserver.images.clientserver_cg }}"
        command: ["sh", "-c", "cp -r /opt/app-root/src/clients/* /var/www/html/clients/"]
        volumeMounts:
          - name: shared-data
            mountPath: /var/www/html/clients/
      - name: "init-shared-data-re"
        image: "{{ template "image" .Values.configs.clientserver.images.clientserver_re }}"
        command: ["sh", "-c", "cp -r /opt/app-root/src/clients/* /var/www/html/clients/"]
        volumeMounts:
          - name: shared-data
            mountPath: /var/www/html/clients/
      containers:
      - name: tas-clients
        image: "{{ template "image" .Values.configs.clientserver.images.httpd }}"
        volumeMounts:
          - name: shared-data
            mountPath: /var/www/html/clients/
        imagePullPolicy: IfNotPresent
        ports:
          - containerPort: 8080
            protocol: TCP
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
